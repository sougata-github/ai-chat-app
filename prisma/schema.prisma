generator client {
  provider = "prisma-client-js"
  output = "../src/generated/client"

  runtime                = "nodejs"
  moduleFormat           = "esm"
  generatedFileExtension = "ts"
  importFileExtension    = "ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(uuid())

  name           String?
  email          String?   @unique
  emailVerified  Boolean   @default(false)
  image          String?


  isAnonymous    Boolean?  @default(false)
  messageCount   Int       @default(0)
  lastReset      DateTime?

  chats          Chat[]
  messages       Message[]
  sessions       Session[]
  accounts       Account[]

  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Session {
  id          String   @id @default(uuid())
  userId      String
  token       String   @unique
  expiresAt   DateTime
  ipAddress   String?
  userAgent   String?

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Account {
  id                      String   @id @default(uuid())
  userId                  String
  accountId               String
  providerId              String
  accessToken             String?
  refreshToken            String?
  accessTokenExpiresAt    DateTime?
  refreshTokenExpiresAt   DateTime?
  scope                   String?
  idToken                 String?
  password                String?

  user                    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  @@unique([providerId, accountId]) 
}

model Verification {
  id         String   @id @default(uuid())
  identifier String
  value      String
  expiresAt  DateTime

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}


model Chat {
  id       String   @id @default(uuid())
  title    String   @default("New Chat")
  archived Boolean  @default(false)

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    
  messages Message[]
  streams Stream[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role  {
    USER
    AI
}


model Attachment {
  id String @id @default(uuid())
  
  name String
  type String 
  url String
  key String?

  messageId String
  message Message?
   
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id String @id @default(uuid())

  role Role
  parts Json 
  imageKey String? 
  imageUrl String?
  
  attachmentId String? @unique
  attachment Attachment? @relation(fields: [attachmentId], references: [id], onDelete: Cascade)

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  chatId String
  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)

  promptId   String?     @unique
  prompt     Message?    @relation("ResponseMessage", fields: [promptId], references: [id])
  response   Message?    @relation("ResponseMessage")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Stream {
  id String @id @default(uuid())
  chatId String
  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}